-*- text -*- (c) 2007 Jens Hauke <hauke@par-tec.de>

ParaStation p4sock Protokoll.
(Zuverlässiges, verbindungsorientiertes Kommunikationsprotokoll)

Das p4sock Protokoll ist ein Kommunikationsprotokoll für die
Datenkommunikation zwischen Prozessen (Inter Prozess
Kommunikation). Sein Design ist primär für die hoch performante
Kommunikation (geringe Latenz, hoher Durchsatz) zwischen Prozessen
paralleler Anwendungen in einem Rechnerverbund (Cluster) ausgelegt und
für diesen Zweck optimiert. Dies wiederspricht jedoch nicht dem
Konzept der klassische Punkt zu Punkt Kommunikation (meist mittels
TCP), sondern ist als Erweiterung zu sehen, so dass p4sock auch hier
Leistungsvorteile bietet.



"Zutaten"

Rechner (Host)

  Hier laufen die Prozesse.

Prozess

  Der "Anwender" des Kommunikationsprotokolls.


Netzwerk, Netzwerkschicht (OSI Level ?)

  Verantwortlich für die Übermittlung von Datenpakten an andere
  Rechner. Es wird erwartet, dass die Netzwerkschicht in der Lage ist
  fehlerhafte (durch Übertragungsfehler veränderte Pakete) erkennt und
  dies der höheren Schicht mitteilt bzw. garnicht erst zustellt. Dies
  wird meist durch Prüfsummenbildung in Hard- und/oder Software
  bewerkstelligt. Es werden keinerlei Anforderungen an
  Paketreihenfolge, Zuverlässigkeit einer Zustellung, oder
  Paketduplizierung im Netzwerk gestellt. D.h es dürfen Pakete
  verloren gehen oder mehrfach zugestellt werden; Pakete in anderer
  Reihenfolge ankommen, als sie abgesendet wurden.

  In einem Rechner können mehrere Netzwerke vorhanden sein.


Rechner ID

  Zur Identifikation eines Rechners (4 Byte).


Netzwerk ID

  Zur Identifikation eines Netzwerkendpunktes. Im Falle von Ethernet
  ist dies wahlweise eine der dieser Netzwerkkarten zugeordneten IP
  Adressen, oder die MAC Adresse der Netzwerkkarte. Ein Netzwerk kann
  somit über mehrere (aber eindeutige) ID's verfügen.

  Über die Netzwerk ID wird neben dem Netzwerkendpunkt indirekt auch
  ein Rechner eindeutig spezifiziert.


Kanonische Netzwerk ID

  Jeder Netzwerkendpunkt hat genau eine kanonische Netzwerk ID welche
  bei der Kommunikation verwendet wird. Im Falle von Ethernet ist dies
  die MAC Adresse der Netzwerkkarte. Jede Netzwerk ID wird im laufe des
  Verbindungsaufbaus in eine kanonische Netzwerk ID übersetzt.


Lokale Kommunikation

  Aus Sicht eines Prozesses, eine Kommunikation zu einem auf dem
  gleichen Rechner befindlichen Prozess.


Kommunikationsgruppe

  Logische Zusammenfassung lokaler Verbindungsendpunkte. (In der Regel
  wird in einer parallelen Anwendung eine eins zu eins Beziehung
  zwischen Prozess und Kommunikationsgruppe bestehen. Es sind aber
  auch Anwendungen denkbar, in denen ein Prozess mehrere
  Prozessgruppen benutzt, oder auch umgekehrt, dass eine
  Kommunikationsgruppe zwischen mehreren Prozessen geteilt wird.)


Protokollhandler

  Ist verantwortlich für die gesamte Koordination des Protokolls und
  der Verwaltung der benötigten Datenstrukturen. Er sitzt im Kern des
  Betriebssystems und ist realisiert als Kernelmodul. An seinem einen
  Ende sitzen die Prozesse, am anderen Ende alle angeschlossenen
  Netzwerke.


Verbindungsindex innerhalb der Kommunikationsgruppe

  Jede Verbindung in einer Kommunikationsgruppe ist in dieser Gruppe
  eindeutig indiziert. Mit diesem Index (2 Byte) kann der Nutzer der
  Gruppe (der Prozess) die Verbindungen voneinander unterscheiden (recv)
  bzw. sie Adressieren (send). Dieser Verbindungsindex hat nur bei der
  Kommunikation zwischen Prozess und Protokollhandler eine Bedeutung.

  Der Verbindungsindex wird beim Verbindungsaufbau vergeben.


Name der Kommunikationsgruppe

  Über den Namen der Kommunikationsgruppe (8 Byte) kann eine
  Kommunikationsgruppe referenziert werden. Der Name ist auf
  einem Rechner eindeutig. Der Name wird von dem Prozess der die
  Kommunikationsgruppe nutzt vergeben, kann vom System bei nicht
  Eindeutigkeit aber abgewiesen werden. Anonyme Gruppen (Gruppen ohne
  Namen) können neu Verbindungen zu anderen Gruppen aufbauen, selbst
  jedoch (mangels Adressierungsmöglichkeit) keine Verbindungen
  annehmen.

  Der Name der Kommunikationsgruppe ist mit der Portnummer anderer
  Protokolle (UDP, TCP) vergleichbar.


Verbindungsindex innerhalb des Rechners

  Jede Verbindung die zu einem Rechner führt, ist auf diesem Rechner
  eindeutig indiziert. Ein ankommendes Datenpaket kann mit diesem
  Index (2 Byte) eindeutig einer lokalen Kommunikationsgruppe und in
  dieser einem Kommunikationsgruppenverbindungsindex zugeordnet
  werden, ohne dass diese Information mit übertragen werden muss. Die
  Zuordnung ist durch ein Nachschlagen in einer Tabelle (Array)
  realisierbar und somit deutlich kostengünstiger, als zum Beispiel bei
  einer Adressierung, bei der Paare von Absender/Zieladresse (vgl. TCP)
  gesucht werden müssten. Dieser Verbindungsindex hat nur bei der
  Kommunikation zwischen Protokollhandlern eine Bedeutung.

  Der Verbindungsindex wird beim Verbindungsaufbau vergeben.


Kommunikationsendpunkt

  Ist eine Kommunikationsgruppe auf einem Rechner; eindeutig
  identifizierbar über das Paar Rechner ID und
  Kommunikationsgruppenname.



SYN Paket

  Dient zur Initiierung einer Verbindung. Mit diesem Paket werden
  folgende Informationen übermittelt:

  - Kanonische Netzwerk ID des Absenders (Verbindungsaufbauende Seite)

  - Verbindungsindex des lokalen Rechners (Verbindungsaufbauende Seite)

  - Name der Kommunikationsgruppe des Ziels

  - Initiale Sequenznummer für die spätere Kommunikation

  - Rechner ID oder Netzwerk ID des Ziels

  Die Kanonische Netzwerk ID des Ziels ist in der Regel zu diesem
  Zeitpunkt noch nicht bekannt (Ausnahme: Adressierung über kanonische
  Netzwerk ID). SYN Pakete werden daher an alle am Netzwerk
  angeschlossenen Rechner geschickt (Broadcast), aber nur von dem
  Rechner beantwortet, dessen eigene Rechner ID oder eine der Netzwerk
  ID's mit der der Anfrage übereinstimmt.


SYNACK Paket

  Dient zur Bestätigung eines Verbindungsaufbaus und der Übermittlung
  von Informationen die verbindungsannehmenden Seite (Antwort auf ein
  SYN)

  Mit diesem Paket werden folgende Informationen übermittelt:

  - Kanonische Netzwerk ID des Ziels (verbindungsannehmende Seite)

  - Verbindungsindex des lokalen Rechners (verbindungsannehmende Seite)

  - Verbindungsindex des entfernten Rechners (verbindungsaufbauende Seite)

  - Initiale Sequenznummer

  - Bestätigung der initialen Sequenznummer der Aufbauenden Seite

  - Fehlercode im Falle der Ablehnung einer Verbindung

  Das SYNACK Paket wird an die kanonische Netzwerk ID der
  verbindungsaufbauenden Seite geschickt (Übermittelt mit SYN
  Paket). Der Empfänger des SYNACK Paketes (verbindungsaufbauende
  Seite) kann anhand des Verbindungsindex dieses Paket einer
  lokalen Kommunikationsgruppe zuordnen.


Daten Paket

  Transportiert die Nutzdaten.

  Mit diesem Paket werden folgende Informationen übermittelt:

  - Verbindungsindex des entfernten Rechners

  - Sequenznummer (Sicherungsschicht)

  - ACK Nummer (Sicherungsschicht)

  - WIN Nummer (Flusskontrolle)

  - Länge der Nutzdaten in Byte

  - Flag: Letztes Paket einer Nachricht

  Das Datenpaket wird an die kanonische Netzwerk ID der
  Gegenseite geschickt.


ACK Paket (Bestätigungspaket der Sicherungsschicht)

  Mit diesem Paket werden folgende Informationen übermittelt:

  - Verbindungsindex des entfernten Rechners

  - ACK Nummer (Sicherungsschicht)

  - WIN Nummer (Flusskontrolle)

  - Flag: Resend (NACK)

  Das ACK Paket wird an die kanonische Netzwerk ID der
  Gegenseite geschickt.





Verbindungsaufbau

  Vor dem Aufbau einer Verbindung müssen an beiden Enden der
  Verbindung Kommunikationsgruppen angelegt worden sein. Die
  verbindungsannehmende Seite darf keine anonyme Kommunikationsgruppe
  sein. Die Verbindung wird zwischen zwei Kommunikationsgruppen
  aufgebaut. Die verbindungsaufbauende Seite adressiert ihr Ziel über
  ein Paar aus Rechner ID und dem Namen der Kommunikationsgruppe die
  kontaktiert werden soll (Kommunikationsendpunkt). Ein
  Verbindungsaufbau wird dann über alle verfügbaren Netzwerke des
  Rechners probiert; das Netzwerk, über welches als erstes eine
  Antwort kommt, wird für die spätere Kommunikation verwendet.

  Alternativ zur Rechner ID kann auch eine Netzwerk ID zur
  Adressierung verwendet werden. In diesem Fall wird der Rechner nur
  indirekt, aber immernoch eindeutig, adressiert. Durch die Nutzung
  einer Netzwerk ID zur Adressierung werden zudem auch die möglichen
  Netzwerke für die spätere Kommunikation eingeschränkt, da nicht alle
  Netzwerk ID's in jedem Netzwerk verwendbar sind. Es ist somit
  möglich, neben dem Kommunikationsendpunkt auch den Kommunikationsweg
  vorzugeben bzw. einzuschränken.

  Ein Prozess, der eine Verbindung aufbauen möchte, schickt eine
  "connect" Anforderung an den Protokollhandler seines Rechners. Dies
  geschieht unter Angabe des gewünschten Verbindungsendpunkts (Ziel)
  und der Angabe der zu verwendenden Kommunikationsgruppe (die er
  vorab erzeugt hat und welche für mehrere Verbindungen gleichzeitig
  genutzt werden kann).

  Der Protokollhandler alloziert daraufhin temporär einen freien
  Verbindungsindex in der Kommunikationsgruppe und einen freien
  Verbindungsindex des Rechners. Daraufhin wird ein SYN Paket an das
  Ziel geschickt. Das SYN Paket wird in zeitlichen Abständen solange
  erneut gesendet bis entweder eine gewisse Anzahl von Versuchen
  überschritten wird (Verbindungsaufbau gescheitert), oder eine
  positive oder negative SYNACK Antwort vom Ziel empfangen wird. Im
  Falle einer positiven Antwort werden die temporären
  Verbindungsindizes bis zum Ende der Verbindung übernommen. Der
  Verbindungsindex der Kommunikationsgruppe wird als Antwort auf die
  "connect" Anforderung an den Prozess übermittelt. Im Fehlerfall
  (negatives SYNACK, Verbindungsaufbau gescheitert) werden die
  temporären Verbindungsindizes wieder frei gegeben und dem Prozess
  der Fehlschlag, inklusive Grund, mitgeteilt.

  Der Protokollhandler, welcher das SYN Paket empfängt, alloziert
  ebenfalls jeweils einen freien Verbindungsindex in der adressierten
  Kommunikationsgruppe und einen freien Verbindungsindex des
  Rechners. Sollte die adressierte Kommunikationsgruppe nicht
  vorhanden sein, wird dies mit einem negativen SYNACK quittiert,
  ansonsten ist ein positives SYNACK die Folge.

  Nach erfolgreichem Verbindungsaufbau ist die Verbindung symmetrisch;
  d.h. es ist nichtmehr zwischen verbindungsaufbauender und
  verbindungsannehmender Seite zu unterscheiden.


Kommunikation

  Ein Prozess, der eine Nachricht über eine bestehende Verbindung
  senden möchte, schickt eine "sendto" Anforderung an den
  Protokollhandler seines Rechners. Dies geschieht unter Angabe der zu
  verwendenden Kommunikationsgruppe und dem Verbindungsindex innerhalb
  der Kommunikationsgruppe. Eine Nachricht darf beliebige Länge haben
  (Nur beschränkt durch die Möglichkeit der Längenangabe in 32 Bit).

  Im Protokollhandler wird die Nachricht, in für das zu verwendende
  Netzwerk geeignet große Datenpakete, zerteilt. Über den
  Verbindungsindex innerhalb der Kommunikationsgruppe wird die
  kanonische Netzwerk ID und der Verbindungsindex dieser Verbindung
  auf dem entfernten Rechner ermittelt (Nachschlagen in einer Tabelle
  (Array)) und jedem Datenpaket zugewiesen. Das letzte Paket der
  Nachricht wird als solches markiert (Flag: letztes Paket). Dadurch
  können später beim Empfänger die Nachrichten wieder voneinander
  getrennt werden.

  Die so vorbereiteten Datenpakete werden der Sicherungsschicht des
  Protokollhandlers übergeben.

  Ein Prozess, der eine Nachricht empfangen möchte, schickt eine
  "recvfrom" Anforderung an den Protokollhandler seines Rechners. Er
  erhält dann eine Nachricht von der Verbindung aus der
  Kommunikationsgruppe, welche zuerst eingetroffen ist. Ist die
  Nachricht größer als angefordert, wird nur der angeforderte Teil
  dem Prozess übermittelt. Der Rest der Nachricht wird in
  nachfolgenden "recvfrom" Anforderungen übermittelt. D.h. innerhalb
  einer Nachricht verhält sich der Filedeskriptor welcher mit der
  Kommunikationsgruppe in Verbindung steht, wie ein Datenstrom
  (Stream) von dieser Verbindung. Ein Wechsel zu anderen Verbindungen
  beim Empfang findet nur am Ende von Nachrichten
  statt. "Teildatenströme" werden also niemals gemixt.

  Es wird mit einer "recvfrom" Anforderung niemals mehr als eine
  Nachricht empfangen. Zum trennen der Nachrichten wird das Flag
  "letztes Paket" ausgewertet.


Sicherungsschicht

  Jedes Datenpaket bekommt eine fortlaufende Sequenznummer. Das
  Datenpaket wird in zeitlichen Abständen so lange an den Empfänger
  gesendet, bis dieser entweder den Empfang quittiert (ACK Nummer
  größer oder gleich der Sequenznummer des Datenpakets), oder die
  maximale Anzahl an Versuchen überschritten wurde
  (Verbindungsfehler). Quittierungen durch ACK Nummern werden entweder
  mittels ACK Paketen oder mit Datenpaketen der Rückrichtung gesendet.

  Der Empfänger sortiert eingehende Datenpakete anhand der
  Sequenznummer. Doppelte Pakete werden bestätigt und dann
  verworfen. Fehlende Pakete (erkennbar an dem Eintreffen zu großer
  Sequenznummern), werden durch ACK Pakete mit gesetztem "resend" Flag
  erneut angefordert (NACK). Erwartete Pakete werden nach kurzer
  zeitlicher Verzögerung quittiert (durch ACK oder Datenpaket). Die
  Verzögerung dient der Möglichkeit der Zusammenfassung mehrerer
  Quittierungen (combined ACK's, delayed ACK's). Stehen zu viele
  Quittierungen aus, wird vor Ablauf der Verzögerung sofort quittiert
  (urgent ACK's).

  Erwartete Pakete sind Erkennbar, durch den Vergleich mit einer
  lokalen Kopie der Sequenznummer für den Empfang. Die erwartete
  Sequenznummer des ersten Datenpakets einer Verbindung wurde beim
  Verbindungsaufbau (Initiale Sequenznummer) übermittelt.


Lokale Kommunikation

  Bei der lokalen Kommunikation kann und wird die Sicherungsschicht
  zur Vermeidung von unnötigen Verarbeitungsschritten umgangen, da
  hier kein Paketverlust eintritt, eine Überprüfung auf
  Paketverlust/Paketreihenfolge daher überflüssig ist. Für die
  Prozesse geschieht dies transparent.


Flusskontrolle

  Datenpakete werden beim Sender nicht verschickt, wenn deren
  Sequenznummer größer einer lokal gespeicherten WIN Nummer ist. Der
  Empfänger verschickt neue größere WIN Nummern, sobald er bereit
  ist, weitere Daten zu empfangen. Dies geschieht durch das Senden von
  ACK Paketen, oder wird zusammen mit Datenpaketen versendet. Um ein
  stehen bleiben der Verbindung beim Verlust dieser Nachrichten zu
  verhindern, darf der Sender nach gewisser Zeit auch Datenpakete mit
  Sequenznummern größer als der gespeicherten WIN Nummer
  versuchsweise senden (probe message). Der Empfänger darf diese
  Datenpakete stillschweigend verwerfen, oder kann sie mit nun
  größerer WIN Nummer bestätigen.


Verbindungsende

  Das Verbindungsende wird durch eine Nachricht der Länge Null (ein
  Datenpaket der Länge Null mit gesetztem letztes Paket Flag) der
  Gegenstelle mitgeteilt.



Polling

  Warten auf Interrupts im kritischen Pfad der Kommunikation benötigt
  zusätzliche Zeit. Dies ist besonders beim warten auf Nachrichten
  relevant (recv). Im p4sock Protokoll ist daher "polling" auf
  Nachrichten eingebaut, so dass Nachrichten unter Umgehung des
  Interrupthandlers empfangen werden können. Hierzu ist die
  Unterstützung des Netwerkkartentreibers notwendig. Da "polling"
  eines auf Empfang wartenden Prozesses CPU Zeit verbraucht, die
  evtl. von anderen Prozessen Sinnvoller genutzt werden könnte,
  besteht die Möglichkeit der Konfiguration:

  Polling

  - immer bis Timeout (verbraucht CPU Zeit, die anderen Prozessen
    verloren geht. Gewährleistet aber die kürzeste Antwortzeit)

  - nur wenn CPU nicht von anderen Prozessen gebraucht wird
    (Zusätzlicher Aufwand, um nach anderen Prozessen zu suchen)

  - Deaktiviert (kein Polling).




Neu (?):

- Unterschiedliche Adressierung für Verbindungsaufbau und spätere
  Kommunikation. Die Zuordnung von Datenpaketen zu Verbindungen ist
  damit kostengünstiger, als in Protokollen, welche für jedes
  Datenpaket Adresspaare in Verbindungslisten suchen müssen, um
  Verbindungen eindeutig zu identifizieren. Weiterer Vorteil ist, dass
  die Kontrolldaten, die in jedem Datenpaket mitgeschickt werden
  müssen, minimiert werden (z.B. TCP: Absender IP und Port, Empfänger
  IP und Port -> 12 Byte. p4sock: Verbindungsindex -> 2 Byte). Der
  aufwändige Teil bei der Zuordnung ist nurnoch einmal beim
  Verbindungsaufbau zu tätigen.  (Nachteil: Böswillig in das Netzwerk
  eingespeiste gefälschte Pakete führen eher zu Verbindungsfehlern,
  als bei TCP)

- Zusammenfassung von Verbindungen zu Kommunikationsgruppen.
  Verringert den Verwaltungsaufwand bei der Übermittlung von Daten
  zwischen Userlevel und Kernellevel (1 zu N Kommunikation über einen
  Filedeskriptor. Gleichzeitiges warten auf Daten von irgendeiner
  Verbindungen, ohne alle Verbindungen angeben zu müssen).

- Mix aus Paket orientierter und Datenstrom (stream) Kommunikation.
  Nachrichten werden immer am Stück zugestellt. D.h sie können nicht
  durch Nachrichten oder Nachrichtenfragmente von anderen Verbindungen
  unterbrochen werden. Dieses Verhalten ist ansonsten nur von Paket
  orientierten Protokollen (z.B. UDP) oder von Punkt zu Punkt
  Protokollen (da gibt es diese Problematik nicht) bekannt. Neu (?)
  ist, dass die Nachrichten aus mehreren Paketen bestehen dürfen.

  (Im Prinzip kennt auch das UDP Protokoll "atomische" Nachrichten bis zu einer
  Größe von 64kByte, die in der Netzwerkschicht in kleinere Pakete
  geteilt werden. Die Funktionsweise ist aber eine andere und die
  Nachrichtenlänge dadurch sehr begrenzt.)


- Polling beim Empfang? Dies aber im Kernel und nur wenn die CPU
  ansonsten idle'n würde. (Im Userlevel machen wir und andere das
  schon lange)
